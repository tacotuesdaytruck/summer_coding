## Recursive Algorithms ##
# LIFO - Last In, First Out
# Put books on shelf A-Z; you take them out Z-A

# Factorials n!

########## (1) - iteration method
def iterative_function(n):
  fact = 1
  for i in range(2, n + 1):  
    fact *= i  # fact = fact * i
  return fact
print(iterative_function(5))

########### (2) - recursion method
def recur_factorial(n):
  if n == 1:
    return n
  else:
    temp = recur_factorial(n-1)
    temp = temp * n                 # this is executed only after the base case is reached
  return temp

print(recur_factorial(5))

###################################

def recur_fastfactorial(n):
  if n == 1: return n
  else: return n * recur_fastfactorial(n-1)

print(recur_fastfactorial(5))

###################################

def permute(string, pocket = ""):
  if len(string) == 0:
    print(pocket)
  else:
    for i in range(len(string)):
      letter = string[i]
      front = string[0:i]
      back = string[i+1:]   #until the end of the string
      together = front + back
      permute(together, letter + pocket)

print(permute("ABC", ""))

###################################
# DATA STRUCTURES
# data structures are containers of data
# Linear search, binary search, bubble sort, insertion sort

def linear_search(arr, target):
  for i in range(len(arr)):
    if arr[i] == target:
      return i 

arr = [2, 5, 6, 7, 10, 16, 22]
target = 10

print(linear_search(arr, target))

###################################

